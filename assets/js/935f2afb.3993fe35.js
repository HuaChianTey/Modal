"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[581],{5610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/Modal/","docId":"getting-started","unlisted":false},{"type":"category","label":"Usage","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Modal Reference","href":"/Modal/usage/modal-reference","docId":"usage/modal-reference","unlisted":false},{"type":"link","label":"Passing Data","href":"/Modal/usage/passing-data","docId":"usage/passing-data","unlisted":false},{"type":"link","label":"Returning Data","href":"/Modal/usage/returning-data","docId":"usage/returning-data","unlisted":false},{"type":"link","label":"Closing Programmatically","href":"/Modal/usage/closing-programmatically","docId":"usage/closing-programmatically","unlisted":false},{"type":"link","label":"Multiple Modals","href":"/Modal/usage/multiple-modals","docId":"usage/multiple-modals","unlisted":false}],"href":"/Modal/category/usage"},{"type":"category","label":"Configuration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Size","href":"/Modal/configuration/size","docId":"configuration/size","unlisted":false},{"type":"link","label":"Position","href":"/Modal/configuration/position","docId":"configuration/position","unlisted":false},{"type":"link","label":"Close Button","href":"/Modal/configuration/close-button","docId":"configuration/close-button","unlisted":false},{"type":"link","label":"Hide Header","href":"/Modal/configuration/hide-header","docId":"configuration/hide-header","unlisted":false},{"type":"link","label":"Background Click","href":"/Modal/configuration/background-click","docId":"configuration/background-click","unlisted":false},{"type":"link","label":"Focus Trap","href":"/Modal/configuration/focus-trap","docId":"configuration/focus-trap","unlisted":false}],"href":"/Modal/category/configuration"},{"type":"category","label":"Styling","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Modal Style","href":"/Modal/styling/modal-style","docId":"styling/modal-style","unlisted":false},{"type":"link","label":"Animation","href":"/Modal/styling/animation","docId":"styling/animation","unlisted":false},{"type":"link","label":"Custom Layout","href":"/Modal/styling/custom-layout","docId":"styling/custom-layout","unlisted":false},{"type":"link","label":"Custom Overlay","href":"/Modal/styling/custom-overlay","docId":"styling/custom-overlay","unlisted":false}],"href":"/Modal/category/styling"}]},"docs":{"configuration/background-click":{"id":"configuration/background-click","title":"Background Click","description":"By default, a modal is cancelled if the user clicks anywhere outside the modal. This behavior can be disabled by setting DisableBackgroundCancel option to true.","sidebar":"tutorialSidebar"},"configuration/close-button":{"id":"configuration/close-button","title":"Close Button","description":"By default, modals will display a close button in the top right corner. However, if you prefer, you can remove the close button using the HideCloseButton option.","sidebar":"tutorialSidebar"},"configuration/focus-trap":{"id":"configuration/focus-trap","title":"Focus Trap","description":"Blazored Modal comes with a built-in focus trap. Focus traps are an important feature for accessability as they stop focus dropping behind the modal when pressing the tab key.","sidebar":"tutorialSidebar"},"configuration/hide-header":{"id":"configuration/hide-header","title":"Hide Header","description":"When displaying a modal, a header is rendered showing the title of the modal and the close button. However, if you\'re planning to render your own header as part of the component being displayed, or you just don\'t want a header, you can turn it off.","sidebar":"tutorialSidebar"},"configuration/position":{"id":"configuration/position","title":"Position","description":"Modals are shown in the center of the screen near the top of the viewport. This can be customised via the Position option using the ModalPosition enum. The options available are:","sidebar":"tutorialSidebar"},"configuration/size":{"id":"configuration/size","title":"Size","description":"The width of a modal can be configured using the Size option. Blazored Modal has a range of built-in sizes as well as the ability to define a custom size.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Nuget","sidebar":"tutorialSidebar"},"styling/animation":{"id":"styling/animation","title":"Animation","description":"By default, the modal is shown with a subtle fade in out animation. However, this can be disabled so the modal shows and hides immediately.","sidebar":"tutorialSidebar"},"styling/custom-layout":{"id":"styling/custom-layout","title":"Custom Layout","description":"Blazored Modal provides a default look, this includes an overlay that covers the viewport and the default modal styling. However, you can remove all of this using the custom layout option. When set to true all of the default UI is removed and you become responsible for providing an alternative one. This option allows complete control over the look and feel of the modal.","sidebar":"tutorialSidebar"},"styling/custom-overlay":{"id":"styling/custom-overlay","title":"Custom Overlay","description":"The overlay can be customised by providing one or more custom CSS classes to augment or overwrite the default style. Note that you may need to add the !important keyword to some properties due the the use of scoped CSS, which can create a higher specificity for the default styles.","sidebar":"tutorialSidebar"},"styling/modal-style":{"id":"styling/modal-style","title":"Modal Style","description":"If you want to change to default look of the modal you can pass in your own CSS classes which will replace the default style classes that are applied. This allows you complete control over the look of the modal.","sidebar":"tutorialSidebar"},"usage/closing-programmatically":{"id":"usage/closing-programmatically","title":"Closing Programmatically","description":"While most modals will be dismissed by a user via buttons on the UI, sometimes you may want to dismiss a modal programmatically. An example of such a usecase is opening a modal with a loading spinner while data is being loaded from a UI or other long running process.","sidebar":"tutorialSidebar"},"usage/modal-reference":{"id":"usage/modal-reference","title":"Modal Reference","description":"When you open a modal you can capture a reference to it and await the result of that modal. This is useful when you want to perform an action when a modal is closed or cancelled.","sidebar":"tutorialSidebar"},"usage/multiple-modals":{"id":"usage/multiple-modals","title":"Multiple Modals","description":"It\'s possible to show multiple modals at the same time, however, each new modal needs to be shown from the currently active modal.","sidebar":"tutorialSidebar"},"usage/passing-data":{"id":"usage/passing-data","title":"Passing Data","description":"Data can be passed to a modal by using the ModalParameters object. The items you add to this collection must match the parameters defined on the component being displayed in the modal. Let\'s look at an example.","sidebar":"tutorialSidebar"},"usage/returning-data":{"id":"usage/returning-data","title":"Returning Data","description":"Data can be returned from a modal by using the ModalResult.Data property. You can return simple strings as well as complex objects.","sidebar":"tutorialSidebar"}}}')}}]);